// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Siscom.Agua.DAL;

namespace Siscom.Agua.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190201220443_Infracciones4")]
    partial class Infracciones4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_account")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix");

                    b.Property<int>("Secuential")
                        .HasColumnName("secuential");

                    b.Property<string>("Suffixes")
                        .HasColumnName("suffixes");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_address")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementsId");

                    b.Property<string>("Indoor")
                        .HasColumnName("indoor")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Lat")
                        .HasColumnName("lat")
                        .HasMaxLength(20);

                    b.Property<string>("Lon")
                        .HasColumnName("Lon")
                        .HasMaxLength(20);

                    b.Property<string>("Outdoor")
                        .IsRequired()
                        .HasColumnName("outdoor")
                        .HasMaxLength(50);

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnName("reference")
                        .HasMaxLength(200);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(150);

                    b.Property<int>("SuburbsId");

                    b.Property<string>("TypeAddress")
                        .HasColumnName("type_address")
                        .HasMaxLength(5);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("AgreementsId");

                    b.HasIndex("SuburbsId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_agreement")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasColumnName("account")
                        .HasMaxLength(50);

                    b.Property<DateTime>("AccountDate")
                        .HasColumnName("account_date");

                    b.Property<int>("DiameterId");

                    b.Property<int>("NumDerivatives")
                        .HasColumnName("num_derivatives");

                    b.Property<DateTime>("StratDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("TypeAgreement")
                        .IsRequired()
                        .HasColumnName("type_agreement")
                        .HasMaxLength(5);

                    b.Property<int>("TypeClassificationId");

                    b.Property<int>("TypeCommertialBusinessId");

                    b.Property<int>("TypeConsumeId");

                    b.Property<int>("TypeIntakeId");

                    b.Property<int>("TypePeriodId");

                    b.Property<int>("TypeRegimeId");

                    b.Property<int>("TypeServiceId");

                    b.Property<int>("TypeStateServiceId");

                    b.Property<int>("TypeUseId");

                    b.HasKey("Id");

                    b.HasIndex("DiameterId");

                    b.HasIndex("TypeClassificationId");

                    b.HasIndex("TypeCommertialBusinessId");

                    b.HasIndex("TypeConsumeId");

                    b.HasIndex("TypeIntakeId");

                    b.HasIndex("TypePeriodId");

                    b.HasIndex("TypeRegimeId");

                    b.HasIndex("TypeServiceId");

                    b.HasIndex("TypeStateServiceId");

                    b.HasIndex("TypeUseId");

                    b.ToTable("Agreement");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_agreement_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AgreementDetailDate")
                        .HasColumnName("agreement_detail_date");

                    b.Property<int>("AgreementId");

                    b.Property<decimal>("Built")
                        .HasColumnName("built");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnName("folio")
                        .HasMaxLength(50);

                    b.Property<decimal>("Ground")
                        .HasColumnName("ground");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update");

                    b.Property<bool>("Manifest")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("manifest")
                        .HasDefaultValue(false);

                    b.Property<string>("Observation")
                        .HasColumnName("observation");

                    b.Property<string>("Register")
                        .IsRequired()
                        .HasColumnName("register")
                        .HasMaxLength(50);

                    b.Property<short>("Sector")
                        .HasColumnName("sector");

                    b.Property<decimal>("TaxableBase")
                        .HasColumnName("taxable_base");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Agreement_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementDiscount", b =>
                {
                    b.Property<int>("IdDiscount")
                        .HasColumnName("id_discount");

                    b.Property<int>("IdAgreement")
                        .HasColumnName("id_agreement");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.HasKey("IdDiscount", "IdAgreement");

                    b.HasIndex("IdAgreement");

                    b.ToTable("Agreement_Discount");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_agreement_file")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<string>("Size")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("size")
                        .HasMaxLength(12)
                        .HasDefaultValue("0");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(5);

                    b.Property<DateTime>("UploadDate")
                        .HasColumnName("upload_date");

                    b.Property<string>("UserId");

                    b.Property<string>("extension")
                        .IsRequired()
                        .HasColumnName("extension")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("UserId");

                    b.ToTable("Agreement_File");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_agreement_log")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action");

                    b.Property<int>("AgreementId");

                    b.Property<DateTime>("AgreementLogDate")
                        .HasColumnName("agreement_log_date");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(80);

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnName("new_value");

                    b.Property<string>("Observation")
                        .HasColumnName("observation");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnName("old_value");

                    b.Property<string>("UserId");

                    b.Property<bool>("Visible")
                        .HasColumnName("visible");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.HasIndex("UserId");

                    b.ToTable("Agreement_Log");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementService", b =>
                {
                    b.Property<int>("IdService")
                        .HasColumnName("id_service");

                    b.Property<int>("IdAgreement")
                        .HasColumnName("id_agreement");

                    b.Property<DateTime>("DateAgreement")
                        .HasColumnName("agreement_date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("IdService", "IdAgreement");

                    b.HasIndex("IdAgreement");

                    b.ToTable("Agreement_Service");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.ApplicationRol", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("DivitionId")
                        .HasColumnName("id_divition");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("middle_name")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondLastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(50);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AssignmentTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_assignment_ticket")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnName("date_assignment");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnName("folio")
                        .HasMaxLength(10);

                    b.Property<string>("Serie")
                        .HasColumnName("serie")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment_Ticket");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("MAC");

                    b.HasKey("Id");

                    b.ToTable("Authorizations");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BranchOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_branch_office")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Closing")
                        .HasColumnName("closing");

                    b.Property<bool>("DontClose")
                        .HasColumnName("dont_close");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Opening")
                        .HasColumnName("opening");

                    b.HasKey("Id");

                    b.ToTable("Branch_Office");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Breach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentTicketId")
                        .HasColumnName("id_assignment_ticket");

                    b.Property<DateTime>("CaptureDate")
                        .HasColumnName("date_capture");

                    b.Property<string>("Car")
                        .IsRequired()
                        .HasColumnName("car")
                        .HasMaxLength(100);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateBreach")
                        .HasColumnName("date_breach");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnName("folio")
                        .HasMaxLength(10);

                    b.Property<decimal>("Judge")
                        .HasColumnName("judge");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnName("licenseplate")
                        .HasMaxLength(50);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnName("place")
                        .HasMaxLength(256);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasMaxLength(256);

                    b.Property<string>("Sector")
                        .HasColumnName("sector")
                        .HasMaxLength(50);

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnName("series")
                        .HasMaxLength(50);

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnName("service")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<int>("TaxUserId");

                    b.Property<string>("TypeCar")
                        .IsRequired()
                        .HasColumnName("type_car")
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Zone")
                        .HasColumnName("zone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TaxUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Breach");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach_article")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnName("article")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("Breach_Article");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int>("AplicationDays")
                        .HasColumnName("aplication_days");

                    b.Property<decimal>("Bonification")
                        .HasColumnName("bonification");

                    b.Property<int>("BreachId");

                    b.Property<int>("BreachListId");

                    b.Property<decimal>("PercentBonification")
                        .HasColumnName("porcent_bonification");

                    b.HasKey("Id");

                    b.HasIndex("BreachId");

                    b.HasIndex("BreachListId");

                    b.ToTable("Breach_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach_list")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreachArticleId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("Fraction")
                        .IsRequired()
                        .HasColumnName("fraction")
                        .HasMaxLength(40);

                    b.Property<bool>("HaveBonification")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("have_bonification")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<int>("Max")
                        .HasColumnName("min");

                    b.Property<int>("Min")
                        .HasColumnName("min");

                    b.HasKey("Id");

                    b.HasIndex("BreachArticleId");

                    b.ToTable("Breach_List");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachWarranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach_warranty")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreachId");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnName("observations")
                        .HasMaxLength(256);

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnName("references")
                        .HasMaxLength(100);

                    b.Property<int>("WarrantyId");

                    b.HasKey("Id");

                    b.HasIndex("BreachId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("Breach_Warranty");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.CancelAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cancel_authorization")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthorizationDate")
                        .HasColumnName("date_authorization");

                    b.Property<int>("BranchOfficeId")
                        .HasColumnName("id_branch_office");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<int>("TerminalUserId")
                        .HasColumnName("id_terminal_user");

                    b.Property<int>("TransactionId")
                        .HasColumnName("id_transaction");

                    b.Property<string>("UserId")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.ToTable("Cancel_Authorization");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Catalogue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id_catalogue");

                    b.Property<int>("GroupCatalogueId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("GroupCatalogueId");

                    b.ToTable("Catalogue");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Clasification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_clasification")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Clasification");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_client")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId");

                    b.Property<string>("CURP")
                        .HasColumnName("curp")
                        .HasMaxLength(18);

                    b.Property<string>("EMail")
                        .HasColumnName("email")
                        .HasMaxLength(150);

                    b.Property<string>("INE")
                        .HasColumnName("ine")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<string>("RFC")
                        .HasColumnName("rfc")
                        .HasMaxLength(17);

                    b.Property<string>("SecondLastName")
                        .IsRequired()
                        .HasColumnName("second_last_name")
                        .HasMaxLength(80);

                    b.Property<string>("TypeUser")
                        .IsRequired()
                        .HasColumnName("type_user")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Consumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_consumption")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConsumptionDate")
                        .HasColumnName("consumption_date");

                    b.Property<decimal>("CurrentConsumption")
                        .HasColumnName("current_consumption")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("DebtId")
                        .HasColumnName("DebtId");

                    b.Property<bool>("InDebt")
                        .HasColumnName("in_debt");

                    b.Property<int>("MeterId");

                    b.Property<decimal>("PreviousConsumption")
                        .HasColumnName("previous_consumption")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("consumption")
                        .HasColumnName("consumption")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("is_active")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("Consumption");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_contact")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId");

                    b.Property<int>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasMaxLength(50);

                    b.Property<string>("TypeNumber")
                        .IsRequired()
                        .HasColumnName("type_number");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_control")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("ViewId");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("Control");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_country")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Consumption")
                        .IsRequired()
                        .HasColumnName("consumption")
                        .HasMaxLength(10);

                    b.Property<DateTime>("DebitDate")
                        .HasColumnName("debit_date");

                    b.Property<int?>("DebtPeriodId")
                        .HasColumnName("DebtPeriodId");

                    b.Property<int>("Derivatives")
                        .HasColumnName("derivatives");

                    b.Property<string>("Discount")
                        .HasColumnName("discount")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnName("expiration_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("FromDate")
                        .HasColumnName("from_date")
                        .HasColumnType("date");

                    b.Property<decimal>("OnAccount")
                        .HasColumnName("on_account")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(5);

                    b.Property<string>("TypeIntake")
                        .IsRequired()
                        .HasColumnName("type_intake")
                        .HasMaxLength(50);

                    b.Property<string>("TypeService")
                        .IsRequired()
                        .HasColumnName("type_service")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UntilDate")
                        .HasColumnName("until_date")
                        .HasColumnType("date");

                    b.Property<short>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Debt");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_calculation")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int>("DebtId");

                    b.Property<decimal>("Factor")
                        .HasColumnName("factor");

                    b.Property<bool>("IsVariable")
                        .HasColumnName("is_variable");

                    b.Property<short>("Percentage")
                        .HasColumnName("percentage");

                    b.Property<short>("TimesFactor")
                        .HasColumnName("times_factor");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("Debt_Calculation");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CodeConcept")
                        .IsRequired()
                        .HasColumnName("code_concept")
                        .HasMaxLength(5);

                    b.Property<int>("DebtId");

                    b.Property<bool>("HaveTax")
                        .HasColumnName("have_tax");

                    b.Property<string>("NameConcept")
                        .IsRequired()
                        .HasColumnName("name_concept")
                        .HasMaxLength(500);

                    b.Property<decimal>("OnAccount")
                        .HasColumnName("on_account")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("Debt_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_discount")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeConcept")
                        .IsRequired()
                        .HasColumnName("code_concept")
                        .HasMaxLength(5);

                    b.Property<int>("DebtId");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnName("discount_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("NameConcept")
                        .IsRequired()
                        .HasColumnName("name_concept")
                        .HasMaxLength(150);

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnName("original_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("Debt_Discount");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_period")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnName("expiration_date")
                        .HasColumnType("date");

                    b.Property<short>("Period")
                        .HasColumnName("period");

                    b.Property<DateTime>("RunDate")
                        .HasColumnName("run_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("RunHour")
                        .HasColumnName("run_hour")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<int?>("TypePeriodId");

                    b.HasKey("Id");

                    b.HasIndex("TypePeriodId");

                    b.ToTable("Debt_Period");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtPrepaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_pepaid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeConcept")
                        .IsRequired()
                        .HasColumnName("code_concept")
                        .HasMaxLength(5);

                    b.Property<int>("DebtId")
                        .HasColumnName("id_debt");

                    b.Property<string>("NameConcept")
                        .IsRequired()
                        .HasColumnName("name_concept")
                        .HasMaxLength(150);

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnName("original_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnName("payment_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PrepaidDetailId");

                    b.HasKey("Id");

                    b.HasIndex("PrepaidDetailId");

                    b.ToTable("Debt_Prepaid");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_debt_dtatus")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DebtId");

                    b.Property<DateTime>("DebtStatusDate")
                        .HasColumnName("debt_dtatus_date");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnName("user")
                        .HasMaxLength(150);

                    b.Property<string>("id_status")
                        .IsRequired()
                        .HasColumnName("id_status");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.ToTable("Debt_Status");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Derivative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_derivative")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementDerivative");

                    b.Property<int>("AgreementId");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Derivative");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Diameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_diameter")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Diameter");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_discount")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<bool>("InAgreement")
                        .HasColumnName("in_agreement");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<short>("Month")
                        .HasColumnName("month");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<short>("Percentage")
                        .HasColumnName("percentage");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_division")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdSolution")
                        .HasColumnName("id_solution");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.ExternalOriginPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_external_origin_payment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBank")
                        .HasColumnName("is_bank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("External_Origin_Payment");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Folio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_folio")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchOfficeId");

                    b.Property<DateTime>("DateCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_current")
                        .HasDefaultValue(new DateTime(2019, 2, 1, 16, 4, 43, 63, DateTimeKind.Local));

                    b.Property<int>("Initial")
                        .HasColumnName("initial");

                    b.Property<int>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnName("range");

                    b.Property<int>("Secuential")
                        .HasColumnName("secuential");

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("Folio");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.GroupCatalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_group_catalogue")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Group_Catalogue");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.GroupStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_group_status")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Group_Status");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_group_type")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Group_Type");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.INPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_inpc")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<short>("Month")
                        .HasColumnName("month");

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("INPC");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_meter")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnName("brand")
                        .HasMaxLength(50);

                    b.Property<string>("Consumption")
                        .HasColumnName("consumption")
                        .HasMaxLength(10);

                    b.Property<DateTime>("DeinstallDate")
                        .HasColumnName("deinstall_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnName("install_date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnName("model")
                        .HasMaxLength(50);

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnName("serial")
                        .HasMaxLength(20);

                    b.Property<string>("Wheels")
                        .IsRequired()
                        .HasColumnName("wheels")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Meter");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_notification")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnName("folio")
                        .HasMaxLength(40);

                    b.Property<DateTime>("FromDate")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnName("notification_date");

                    b.Property<decimal>("Rounding")
                        .HasColumnName("rounding")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UntilDate")
                        .HasColumnName("until_date");

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.NotificationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_notification_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("CodeConcept")
                        .IsRequired()
                        .HasColumnName("code_concept")
                        .HasMaxLength(5);

                    b.Property<bool>("HaveTax")
                        .HasColumnName("have_tax");

                    b.Property<string>("NameConcept")
                        .IsRequired()
                        .HasColumnName("name_concept")
                        .HasMaxLength(150);

                    b.Property<int>("NotificationId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("Notification_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.OrderSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_order_sale")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnName("date_order");

                    b.Property<int>("DivisionId");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnName("expiration_date")
                        .HasColumnType("date");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnName("folio")
                        .HasMaxLength(30);

                    b.Property<int>("IdOrigin")
                        .HasColumnName("id_origin");

                    b.Property<int>("IdTaxUser")
                        .HasColumnName("id_tax_user");

                    b.Property<string>("Observation")
                        .HasColumnName("observation")
                        .HasMaxLength(250);

                    b.Property<decimal>("OnAccount")
                        .HasColumnName("on_account")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Period")
                        .HasColumnName("period");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(5);

                    b.Property<short>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Order_Sale");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.OrderSaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_order_sale_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CodeConcept")
                        .IsRequired()
                        .HasColumnName("code_concept")
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<bool>("HaveTax")
                        .HasColumnName("have_tax");

                    b.Property<string>("NameConcept")
                        .IsRequired()
                        .HasColumnName("name_concept")
                        .HasMaxLength(500);

                    b.Property<decimal>("OnAccount")
                        .HasColumnName("on_account")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderSaleId");

                    b.Property<short>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("unit_price");

                    b.Property<string>("Unity")
                        .IsRequired()
                        .HasColumnName("unity")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("OrderSaleId");

                    b.ToTable("Order_Sale_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.OriginPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_origin_payment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Origin_Payment");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_payment")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId")
                        .HasColumnName("id_agreement");

                    b.Property<string>("AuthorizationOriginPayment")
                        .HasColumnName("authorization_origin_payment")
                        .HasMaxLength(50);

                    b.Property<string>("BranchOffice")
                        .IsRequired()
                        .HasColumnName("branch_office")
                        .HasMaxLength(30);

                    b.Property<int>("ExternalOriginPaymentId");

                    b.Property<int>("OriginPaymentId");

                    b.Property<int>("PayMethodId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("payment_date");

                    b.Property<string>("PercentageTax")
                        .HasColumnName("percentage_tax")
                        .HasMaxLength(2);

                    b.Property<decimal>("Rounding")
                        .HasColumnName("rounding")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<decimal>("Subtotal")
                        .HasColumnName("subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TransactionFolio")
                        .HasColumnName("transaction_folio")
                        .HasMaxLength(40);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("ExternalOriginPaymentId");

                    b.HasIndex("OriginPaymentId");

                    b.HasIndex("PayMethodId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_transaction_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CodeConcept")
                        .HasColumnName("code_concept")
                        .HasMaxLength(10);

                    b.Property<int>("DebtId")
                        .HasColumnName("id_debt");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(150);

                    b.Property<int>("PaymentId");

                    b.Property<int>("PrepaidId")
                        .HasColumnName("id_prepaid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Payment_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PayMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pay_method")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Pay_Method");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Prepaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_prepaid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Accredited")
                        .HasColumnName("accredited")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AgreementId");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Percentage")
                        .HasColumnName("percentage");

                    b.Property<DateTime>("PrepaidDate")
                        .HasColumnName("prepaid_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("AgreementId");

                    b.ToTable("Prepaid");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PrepaidDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_drepaid_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PrepaidDetailDate")
                        .HasColumnName("prepaid_detail_date");

                    b.Property<int>("PrepaidId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("PrepaidId");

                    b.ToTable("Prepaid_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_product")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId");

                    b.Property<bool>("HaveTariff")
                        .HasColumnName("have_tariff");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Parent")
                        .HasColumnName("parent");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PushNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_notification")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgreementId")
                        .HasColumnName("agreement_id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int>("DebtId")
                        .HasColumnName("debt_id");

                    b.Property<string>("Folio")
                        .HasColumnName("folio")
                        .HasMaxLength(40);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<byte>("Porcentage")
                        .HasColumnName("porcentage");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("Push_Notification");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_region")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_service")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InAgreement")
                        .HasColumnName("in_agreement");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCommercial")
                        .HasColumnName("is_commercial");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_state")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountriesId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Status", b =>
                {
                    b.Property<string>("CodeName")
                        .HasColumnName("id_status");

                    b.Property<int>("GroupStatusId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(30);

                    b.HasKey("CodeName", "GroupStatusId");

                    b.HasIndex("GroupStatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_suburb")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClasificationsId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("RegionsId");

                    b.Property<int>("TownsId");

                    b.HasKey("Id");

                    b.HasIndex("ClasificationsId");

                    b.HasIndex("RegionsId");

                    b.HasIndex("TownsId");

                    b.ToTable("Suburb");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_system_log")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller");

                    b.Property<DateTime>("DateLog")
                        .HasColumnName("date_log");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnName("parameter");

                    b.HasKey("Id");

                    b.ToTable("System_Log");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.SystemParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_system_parameters")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateColumn")
                        .HasColumnName("date_column");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<decimal>("NumberColumn")
                        .HasColumnName("number_column")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<string>("TextColumn")
                        .HasColumnName("text_column");

                    b.Property<short>("TypeColumn")
                        .HasColumnName("type_column");

                    b.HasKey("Id");

                    b.ToTable("System_Parameters");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tariff")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnName("account_number")
                        .HasMaxLength(20);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnName("concept")
                        .HasMaxLength(80);

                    b.Property<decimal>("EndConsume")
                        .HasColumnName("end_consume")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnName("from_date")
                        .HasColumnType("date");

                    b.Property<bool>("HaveConsume")
                        .HasColumnName("have_consume");

                    b.Property<bool>("HaveTax")
                        .HasColumnName("have_tax");

                    b.Property<int>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<short>("Percentage")
                        .HasColumnName("percentage");

                    b.Property<int>("ServiceId");

                    b.Property<decimal>("StartConsume")
                        .HasColumnName("start_consume")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TypeConsumeId");

                    b.Property<int>("TypeIntakeId");

                    b.Property<DateTime>("UntilDate")
                        .HasColumnName("until_date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TypeConsumeId");

                    b.HasIndex("TypeIntakeId");

                    b.ToTable("Tariff");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TariffProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tariff")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnName("account_number")
                        .HasMaxLength(20);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnName("from_date");

                    b.Property<bool>("HaveTax")
                        .HasColumnName("have_tax");

                    b.Property<int>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVariable")
                        .HasColumnName("is_variable");

                    b.Property<short>("Percentage")
                        .HasColumnName("percentage");

                    b.Property<int>("ProductId");

                    b.Property<short>("TimesFactor")
                        .HasColumnName("times_factor");

                    b.Property<DateTime>("UntilDate")
                        .HasColumnName("until_date");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Tariff_Product");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TaxAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tax_address")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Indoor")
                        .HasColumnName("indoor")
                        .HasMaxLength(50);

                    b.Property<string>("Outdoor")
                        .IsRequired()
                        .HasColumnName("outdoor")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(30);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(150);

                    b.Property<string>("Suburb")
                        .HasColumnName("suburb")
                        .HasMaxLength(100);

                    b.Property<int>("TaxUserId");

                    b.Property<string>("Town")
                        .HasColumnName("town")
                        .HasMaxLength(30);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("TaxUserId");

                    b.ToTable("Tax_Address");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TaxUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tax_user")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CURP")
                        .HasColumnName("curp")
                        .HasMaxLength(18);

                    b.Property<string>("EMail")
                        .HasColumnName("email")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasMaxLength(50);

                    b.Property<string>("RFC")
                        .HasColumnName("rfc")
                        .HasMaxLength(17);

                    b.HasKey("Id");

                    b.ToTable("Tax_User");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Terminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_terminal")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchOfficeId");

                    b.Property<decimal>("CashBox")
                        .HasColumnName("cash_box")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("MacAdress")
                        .IsRequired()
                        .HasColumnName("mac_adress")
                        .HasMaxLength(20);

                    b.Property<string>("SerialNumber")
                        .HasColumnName("serial_number")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("BranchOfficeId");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TerminalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_terminal_user")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("in_operation")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OpenDate")
                        .HasColumnName("open_date")
                        .HasColumnType("date");

                    b.Property<int>("TerminalId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TerminalId");

                    b.HasIndex("UserId");

                    b.ToTable("Terminal_User");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_town")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30);

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_transaction")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Aplication")
                        .IsRequired()
                        .HasColumnName("aplication")
                        .HasMaxLength(20);

                    b.Property<string>("AuthorizationOriginPayment")
                        .HasColumnName("authorization_origin_payment")
                        .HasMaxLength(50);

                    b.Property<int>("CancelAuthorizationId")
                        .HasColumnName("id_cancel_authorization");

                    b.Property<string>("CancellationFolio")
                        .HasColumnName("cancellation_folio")
                        .HasMaxLength(40);

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnName("date_transaction");

                    b.Property<int>("ExternalOriginPaymentId");

                    b.Property<string>("Folio")
                        .HasColumnName("folio")
                        .HasMaxLength(40);

                    b.Property<int>("OriginPaymentId");

                    b.Property<int>("PayMethodId");

                    b.Property<decimal>("Rounding")
                        .HasColumnName("rounding")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Sign")
                        .HasColumnName("sign");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TerminalUserId");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TypeTransactionId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalOriginPaymentId");

                    b.HasIndex("OriginPaymentId");

                    b.HasIndex("TerminalUserId");

                    b.HasIndex("TypeTransactionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_transaction_detail")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CodeConcept")
                        .HasColumnName("code_concept")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(150);

                    b.Property<int>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transaction_Detail");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TransactionFolio", b =>
                {
                    b.Property<string>("Folio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("folio");

                    b.Property<DateTime>("DatePrint");

                    b.Property<int>("TransactionId");

                    b.HasKey("Folio");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transaction_Folio");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Type", b =>
                {
                    b.Property<string>("CodeName")
                        .HasColumnName("id_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(30);

                    b.Property<int>("GroupTypeId");

                    b.HasKey("CodeName");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_classification")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IntakeAcronym")
                        .IsRequired()
                        .HasColumnName("intake_acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Type_Classification");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeCommercialBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_commertial_business")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClasificationGroup")
                        .HasColumnName("clasification_group");

                    b.Property<string>("IntakeAcronym")
                        .IsRequired()
                        .HasColumnName("intake_acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Type_Commertial_Business");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeConsume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_consume")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnName("acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Type_Consume");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeIntake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_intake")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnName("acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Type_Intake");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_period")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<short>("Mounth")
                        .HasColumnName("mounth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Type_Period");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeRegime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_regime")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IntakeAcronym")
                        .IsRequired()
                        .HasColumnName("intake_acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Type_Regime");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_service")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Type_Service");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeStateService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_state_service")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Type_State_Service");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_transaction")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Type_Transaction");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TypeUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_type_use")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IntakeAcronym")
                        .IsRequired()
                        .HasColumnName("intake_acronym")
                        .HasMaxLength(2);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Type_Use");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_view")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("View");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.ViewProfile", b =>
                {
                    b.Property<int>("ViewId")
                        .HasColumnName("id_profile");

                    b.Property<string>("RoleId")
                        .HasColumnName("id_view");

                    b.HasKey("ViewId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("View_Profile");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Warranty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_breach_warranty")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Warranty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationRol")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationRol")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Address", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreements")
                        .WithMany("Addresses")
                        .HasForeignKey("AgreementsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Suburb", "Suburbs")
                        .WithMany("Addresses")
                        .HasForeignKey("SuburbsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Agreement", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Diameter", "Diameter")
                        .WithMany("Agreements")
                        .HasForeignKey("DiameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeClassification", "TypeClassification")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeClassificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeCommercialBusiness", "TypeCommertialBusiness")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeCommertialBusinessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeConsume", "TypeConsume")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeConsumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeIntake", "TypeIntake")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypePeriod", "TypePeriod")
                        .WithMany("Agreements")
                        .HasForeignKey("TypePeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeRegime", "TypeRegime")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeRegimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeService", "TypeService")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeStateService", "TypeStateService")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeStateServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeUse", "TypeUse")
                        .WithMany("Agreements")
                        .HasForeignKey("TypeUseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("AgreementDetails")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementDiscount", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("AgreementDiscounts")
                        .HasForeignKey("IdAgreement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Discount", "Discount")
                        .WithMany("AgreementDiscounts")
                        .HasForeignKey("IdDiscount")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementFile", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("AgreementFiles")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser", "User")
                        .WithMany("AgreementFiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementLog", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("AgreementLogs")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser", "User")
                        .WithMany("AgreementLogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AgreementService", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("AgreementServices")
                        .HasForeignKey("IdAgreement")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Service", "Service")
                        .WithMany("AgreementServices")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.AssignmentTicket", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser", "User")
                        .WithMany("AssignmentTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Breach", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.TaxUser", "TaxUser")
                        .WithMany("Breaches")
                        .HasForeignKey("TaxUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser", "User")
                        .WithMany("Breaches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Breach", "Breach")
                        .WithMany("BreachDetails")
                        .HasForeignKey("BreachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.BreachList", "BreachList")
                        .WithMany("BreachDetails")
                        .HasForeignKey("BreachListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachList", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.BreachArticle", "BreachArticle")
                        .WithMany("BreachLists")
                        .HasForeignKey("BreachArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.BreachWarranty", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Breach", "Breach")
                        .WithMany("BreachWarranties")
                        .HasForeignKey("BreachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Warranty", "Warranty")
                        .WithMany("BreachWarranty")
                        .HasForeignKey("WarrantyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Catalogue", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.GroupCatalogue", "GroupCatalogue")
                        .WithMany("Catalogues")
                        .HasForeignKey("GroupCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Client", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Clients")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Consumption", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Meter", "Meter")
                        .WithMany("Consumptions")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Contact", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Control", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.View")
                        .WithMany("Controls")
                        .HasForeignKey("ViewId");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Debt", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Debts")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtCalculation", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Debt", "Debt")
                        .WithMany("DebtDetails")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtDiscount", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Debt", "Debt")
                        .WithMany("DebtDiscounts")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtPeriod", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.TypePeriod", "TypePeriod")
                        .WithMany()
                        .HasForeignKey("TypePeriodId");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtPrepaid", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.PrepaidDetail", "PrepaidDetail")
                        .WithMany("DebtPrepaids")
                        .HasForeignKey("PrepaidDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.DebtStatus", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Debt", "Debt")
                        .WithMany("DebtStatuses")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Derivative", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Derivatives")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Folio", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.BranchOffice", "BranchOffice")
                        .WithMany("Folios")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Meter", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Meters")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Notification", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Notifications")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.NotificationDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Notification", "Notification")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.OrderSale", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Division", "Division")
                        .WithMany("OrderSale")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.OrderSaleDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.OrderSale", "OrderSale")
                        .WithMany("OrderSaleDetail")
                        .HasForeignKey("OrderSaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Payment", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ExternalOriginPayment", "ExternalOriginPayment")
                        .WithMany("Payments")
                        .HasForeignKey("ExternalOriginPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.OriginPayment", "OriginPayment")
                        .WithMany("Payments")
                        .HasForeignKey("OriginPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.PayMethod", "PayMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PayMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PaymentDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Payment", "Payment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Prepaid", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Agreement", "Agreement")
                        .WithMany("Prepaids")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.PrepaidDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Prepaid", "Prepaid")
                        .WithMany("PrepaidDetails")
                        .HasForeignKey("PrepaidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Product", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Division", "Division")
                        .WithMany("Products")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.State", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Country", "Countries")
                        .WithMany("States")
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Status", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.GroupStatus", "GroupStatus")
                        .WithMany("Statuses")
                        .HasForeignKey("GroupStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Suburb", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Clasification", "Clasifications")
                        .WithMany("Suburbs")
                        .HasForeignKey("ClasificationsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Region", "Regions")
                        .WithMany("Suburbs")
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.Town", "Towns")
                        .WithMany("Suburbs")
                        .HasForeignKey("TownsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Tariff", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Service", "Service")
                        .WithMany("Tariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeConsume", "TypeConsume")
                        .WithMany("Tariffs")
                        .HasForeignKey("TypeConsumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeIntake", "TypeIntake")
                        .WithMany("Tariffs")
                        .HasForeignKey("TypeIntakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TariffProduct", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Product", "Product")
                        .WithMany("TariffProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TaxAddress", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.TaxUser", "TaxUser")
                        .WithMany("TaxAddresses")
                        .HasForeignKey("TaxUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Terminal", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.BranchOffice", "BranchOffice")
                        .WithMany("Terminals")
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TerminalUser", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Terminal", "Terminal")
                        .WithMany("TerminalUsers")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationUser", "User")
                        .WithMany("TerminalUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Town", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.State", "States")
                        .WithMany("Towns")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Transaction", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ExternalOriginPayment", "ExternalOriginPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("ExternalOriginPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.OriginPayment", "OriginPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("OriginPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TerminalUser", "TerminalUser")
                        .WithMany("Transactions")
                        .HasForeignKey("TerminalUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.TypeTransaction", "TypeTransaction")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TransactionDetail", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Transaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.TransactionFolio", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.Transaction", "Transaction")
                        .WithMany("TransactionFolios")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.Type", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.GroupType", "GroupType")
                        .WithMany("Types")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Siscom.Agua.DAL.Models.ViewProfile", b =>
                {
                    b.HasOne("Siscom.Agua.DAL.Models.ApplicationRol", "ApplicationRol")
                        .WithMany("ViewProfiles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Siscom.Agua.DAL.Models.View", "View")
                        .WithMany("ViewProfiles")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
